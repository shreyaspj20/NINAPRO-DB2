# -*- coding: utf-8 -*-
"""DB2_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FCvMYUuT1aVHALJRySCH9vZjSqZqmvTK
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install nina-helper
# %pip install PyWavelets
# %pip install scikit-optimize

from functools import reduce
import joblib
import matplotlib.pyplot as plt
from nina_helper import *
import numpy as np
import os
import pandas as pd
from pywt import *
from scipy.io import loadmat
from scipy import signal
import scipy as sp
from sklearn import svm, metrics
from sklearn.datasets import load_digits
from sklearn.decomposition import PCA
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.model_selection import train_test_split, StratifiedKFold, cross_val_score, GridSearchCV, ShuffleSplit, learning_curve, validation_curve
from sklearn.preprocessing import StandardScaler
from skopt import BayesSearchCV

# Set directory for save location
#os.chdir('/content/drive/MyDrive/NINAPRO/DB2_data/')

import tensorflow.compat.v1 as tf

tf.config.set_soft_device_placement(True)
tf.debugging.set_log_device_placement(True)
from tensorflow import keras as K

#rclone for HPC unless we use winSCP or alternative to transfer data
# from google.colab import drive
# drive.mount('/content/drive')

#CHANGE TO CORRECT DB2 PATH#
db2_path = "/content/drive/MyDrive/NINAPRO/DB2/"

"""##Loading Dataset##"""

"""##PreProcessing##

1.   Filter (Band and notch)
2.   Windowing

##Filtering##
"""

def filter_data(data, f, butterworth_order = 4, btype='lowpass', fs=2000):
  emg_data = data.values[:,:12]

  nyquist = fs/2
  if isinstance(f, int):
      fc = f/nyquist
  else:
      fc = list(f)
      for i in range(len(f)):
          fc[i] = fc[i]/nyquist

  b,a = signal.butter(butterworth_order, fc, btype=btype)
  transpose = emg_data.T.copy()

  for i in range(len(transpose)):
      transpose[i] = (signal.lfilter(b, a, transpose[i]))

  filtered = pd.DataFrame(transpose.T)

  return filtered

def notch_filter(data, f0, Q, fs=2000):
    emg_data = data.values[:,:12]

    b, a = signal.iirnotch(f0, Q, fs)
    transpose = emg_data.T.copy()

    for i in range(len(transpose)):
        transpose[i] = (signal.lfilter(b, a, transpose[i]))

    filtered = pd.DataFrame(transpose.T)


    return filtered


"""##Features##


1.   Time Domain
2.   Frequency Domain (Summary Statistics Optional)
3.   Feature Matrix


"""

from tqdm import tqdm

def feature_extractor(features,shape,data):
  l=pd.DataFrame()
  for i,function in enumerate(tqdm(features)):
        feature=[]
        print("Extracting feature....{}".format(str(function)))
        for i in range(data.shape[0]):
          for j in range(data.shape[2]):
                feature.append(function(data[i][:,j]))
        feature = np.reshape(feature,shape)
        l = pd.concat([l,pd.DataFrame(feature)],axis=1)
        print("Done extracting feature....{}".format(str(function)))
        print()
  return l

"""##Time Domain##"""

def rms(data):
  return np.sqrt(np.mean(data**2))

def hist(data, nbins=20):
  histsig, bin_edges = np.histogram(data, bins = nbins)
  return tuple(histsig)

def mdwt(data):
  cA_3, cD_3, cD_2, cD_1 = wavedec(data,'db7', level=3)
  return cA_3

def entropy(data):
  pk = sp.stats.rv_histogram(np.histogram(data, bins=20)).pdf(data)
  return  sp.stats.entropy(pk)

def kurtosis(data):
  return sp.stats.kurtosis(data)

def zero_cross(data):
  return len(np.where(np.diff(np.sign(data)))[0])/len(data)

def min(data):
  return np.min(data)

def max(data):
  return np.max(data)

def mean(data):
  return np.mean(data)

def median(data):
  return np.median(data)

"""##Frequency Domain##"""

def fft(data):
  return np.fft.fft(data)

def psd(data):
  return np.abs(np.fft.fft(data))**2

"""##Feature Matrix##"""
# Dimenstionality Reduction
def pca(data):
    pca=PCA(n_components=600)
    pca.fit(data)
    x_pca=pca.transform(data)
    return pd.DataFrame(x_pca)

"""##Plotting##"""
def get_validation_curve(classifier,parameter,param_range,X,y): # A generalized function to plot validation curve for all 3 classifiers.
  train_scores, test_scores = validation_curve(
    classifier, X, y, param_name=parameter, param_range=param_range,
    scoring="accuracy", n_jobs=1)
  train_scores_mean = np.mean(train_scores, axis=1)
  train_scores_std = np.std(train_scores, axis=1)
  test_scores_mean = np.mean(test_scores, axis=1)
  test_scores_std = np.std(test_scores, axis=1)

  plt.title("Validation Curve with {}".format(classifier.__class__.__name__))
  plt.xlabel(str(parameter))
  plt.ylabel("Score")
  plt.ylim(0.0, 1.1)
  lw = 2
  plt.semilogx(param_range, train_scores_mean, label="Training score",
              color="darkorange", lw=lw)
  plt.fill_between(param_range, train_scores_mean - train_scores_std,
                  train_scores_mean + train_scores_std, alpha=0.2,
                  color="darkorange", lw=lw)
  plt.semilogx(param_range, test_scores_mean, label="Cross-validation score",
              color="navy", lw=lw)
  plt.fill_between(param_range, test_scores_mean - test_scores_std,
                  test_scores_mean + test_scores_std, alpha=0.2,
                  color="navy", lw=lw)
  plt.legend(loc="best")

  return plt

def plot_learning_curve(estimator, title, X, y, axes=None, ylim=None, cv=None,
                        n_jobs=None, train_sizes=np.linspace(.1, 1.0, 5)):
    """
    Generate 3 plots: the test and training learning curve, the training
    samples vs fit times curve, the fit times vs score curve.

    Parameters
    ----------
    estimator : estimator instance
        An estimator instance implementing `fit` and `predict` methods which
        will be cloned for each validation.

    title : str
        Title for the chart.

    X : array-like of shape (n_samples, n_features)
        Training vector, where ``n_samples`` is the number of samples and
        ``n_features`` is the number of features.

    y : array-like of shape (n_samples) or (n_samples, n_features)
        Target relative to ``X`` for classification or regression;
        None for unsupervised learning.

    axes : array-like of shape (3,), default=None
        Axes to use for plotting the curves.

    ylim : tuple of shape (2,), default=None
        Defines minimum and maximum y-values plotted, e.g. (ymin, ymax).

    cv : int, cross-validation generator or an iterable, default=None
        Determines the cross-validation splitting strategy.
        Possible inputs for cv are:

          - None, to use the default 5-fold cross-validation,
          - integer, to specify the number of folds.
          - :term:`CV splitter`,
          - An iterable yielding (train, test) splits as arrays of indices.

        For integer/None inputs, if ``y`` is binary or multiclass,
        :class:`StratifiedKFold` used. If the estimator is not a classifier
        or if ``y`` is neither binary nor multiclass, :class:`KFold` is used.

        Refer :ref:`User Guide <cross_validation>` for the various
        cross-validators that can be used here.

    n_jobs : int or None, default=None
        Number of jobs to run in parallel.
        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.
        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`
        for more details.

    train_sizes : array-like of shape (n_ticks,)
        Relative or absolute numbers of training examples that will be used to
        generate the learning curve. If the ``dtype`` is float, it is regarded
        as a fraction of the maximum size of the training set (that is
        determined by the selected validation method), i.e. it has to be within
        (0, 1]. Otherwise it is interpreted as absolute sizes of the training
        sets. Note that for classification the number of samples usually have
        to be big enough to contain at least one sample from each class.
        (default: np.linspace(0.1, 1.0, 5))
    """
    if axes is None:
        _, axes = plt.subplots(1, 3, figsize=(20, 5))

    axes[0].set_title(title)
    if ylim is not None:
        axes[0].set_ylim(*ylim)
    axes[0].set_xlabel("Training examples")
    axes[0].set_ylabel("Score")

    train_sizes, train_scores, test_scores, fit_times, _ = \
        learning_curve(estimator, X, y, cv=cv, n_jobs=n_jobs,
                       train_sizes=train_sizes,
                       return_times=True)
    train_scores_mean = np.mean(train_scores, axis=1)
    train_scores_std = np.std(train_scores, axis=1)
    test_scores_mean = np.mean(test_scores, axis=1)
    test_scores_std = np.std(test_scores, axis=1)
    fit_times_mean = np.mean(fit_times, axis=1)
    fit_times_std = np.std(fit_times, axis=1)

    # Plot learning curve
    axes[0].grid()
    axes[0].fill_between(train_sizes, train_scores_mean - train_scores_std,
                         train_scores_mean + train_scores_std, alpha=0.1,
                         color="r")
    axes[0].fill_between(train_sizes, test_scores_mean - test_scores_std,
                         test_scores_mean + test_scores_std, alpha=0.1,
                         color="g")
    axes[0].plot(train_sizes, train_scores_mean, 'o-', color="r",
                 label="Training score")
    axes[0].plot(train_sizes, test_scores_mean, 'o-', color="g",
                 label="Cross-validation score")
    axes[0].legend(loc="best")

    # Plot n_samples vs fit_times
    axes[1].grid()
    axes[1].plot(train_sizes, fit_times_mean, 'o-')
    axes[1].fill_between(train_sizes, fit_times_mean - fit_times_std,
                         fit_times_mean + fit_times_std, alpha=0.1)
    axes[1].set_xlabel("Training examples")
    axes[1].set_ylabel("fit_times")
    axes[1].set_title("Scalability of the model")

    # Plot fit_time vs score
    axes[2].grid()
    axes[2].plot(fit_times_mean, test_scores_mean, 'o-')
    axes[2].fill_between(fit_times_mean, test_scores_mean - test_scores_std,
                         test_scores_mean + test_scores_std, alpha=0.1)
    axes[2].set_xlabel("fit_times")
    axes[2].set_ylabel("Score")
    axes[2].set_title("Performance of the model")

    return plt


#Since sample rate is 2000 Hz -> window length 2 = 1 ms
# window_len_list = [600, 400, 200]
# # These window increments all maintain 92.5% overlap
# window_inc_list = [45, 30, 15]

#for window in range(len(window_len_list)):
window_len = 600
window_inc = 45
print("(window length, window inc) =", (window_len, window_inc))

info_dict = db2_info()  # Get info

# Choose subject and get info
number_of_subjects = 40
# Initialize list of feature mats to stack before pca amd classification
aggregate_principal_matrix_list = []
aggregate_test_principal_matrix_list = []

aggregate_labels_list = []
aggregate_test_labels_list = []

for subject in range(1,number_of_subjects+1):

    # Get EMG, repetition and movement data, cap max length of rest data before and after each movement to 5 seconds
    # Capping occurs by reducing the size of repetition segments since splitting is based on repetition number
    data_dict = nina_helper.import_db2(db2_path, subject, rest_length_cap=5)

    # Create a random test - training split based on repetition number (specify a set to include)
    reps = info_dict['rep_labels']
    nb_test_reps = 2
    nb_splits = 12
    train_reps, test_reps = gen_split_rand(reps, nb_test_reps, nb_splits, base=[2, 5])

    # Normalise EMG data based on training set     train_reps[0, :]
    emg_data = normalise_emg(data_dict['emg'], data_dict['rep'], train_reps[0, :])

    emg_data=pd.DataFrame(emg_data)

    emg_band = filter_data(data=emg_data, f=(0.5,200), butterworth_order=4, btype='bandpass', fs=2000)

    emg_notch = notch_filter(data=emg_band,f0=60,Q=30,fs=2000)

    emg_filtered = emg_notch.to_numpy()

    """##Windowing##"""

    # Window data: x_all data is 4D tensor [observation, time_step, channel, 1] for use with Keras
    #y_all: movement label, length: number of windows
    #r_all: repetition label, length: number of windows
    # x_all, y_all, r_all = get_windows(reps, window_len, window_inc,
    #                                   emg_filtered, data_dict['move'],
    #                                   data_dict['rep'])

    x_all, y_all, r_all = get_windows(reps, window_len, window_inc,
                                  emg_filtered, data_dict['move'],
                                  data_dict['rep'])

    train_idx = get_idxs(r_all, train_reps[0, :])
    X_train = np.squeeze(x_all[train_idx, :, :, :])
    y_train = y_all[train_idx]

    test_idx = get_idxs(r_all, test_reps[0, :])
    X_test =  np.squeeze(x_all[test_idx, :, :, :])
    y_test = y_all[test_idx]

    features_required = [rms,hist,mdwt,entropy,zero_cross,min,max,mean,median] #change this list depending on the features required in the final feature matrix
    feature_matrix = feature_extractor(features_required,(X_train.shape[0],-1),X_train)
    test_feature_matrix = feature_extractor(features_required,(X_test.shape[0],-1),X_test)

    aggregate_principal_matrix_list.append(feature_matrix)
    aggregate_test_principal_matrix_list.append(test_feature_matrix)

    aggregate_labels_list.append(y_train)
    aggregate_test_labels_list.append(y_test)


# Forming 40 subject aggregate feature matrix
aggregate_labels = np.vstack(aggregate_labels_list)
aggregate_test_labels = np.vstack(aggregate_test_labels_list)
np.save("aggregate_labels_{}{}".format(int(window_len/2),'ms'), aggregate_labels)
np.save("aggregate_test_labels_{}{}".format(int(window_len/2),'ms'), aggregate_test_labels)

aggregate_principal_matrix = np.vstack(aggregate_principal_matrix_list)
aggregate_test_principal_matrix = np.vstack(aggregate_test_principal_matrix_list)
# np.save("aggregate_principal_matrix_{}{}".format(int(window_len/2),'ms'), aggregate_principal_matrix)
# np.save("aggregate_test_principal_matrix_{}{}".format(int(window_len/2),'ms'), aggregate_test_principal_matrix)

reduced_feature_matrix = pca(aggregate_principal_matrix)
reduced_test_feature_matrix = pca(aggregate_principal_test_feature_matrix)
np.save("reduced_feature_matrix_{}{}".format(int(window_len/2),'ms'), reduced_feature_matrix)
np.save("reduced_test_feature_matrix_{}{}".format(int(window_len/2),'ms'), reduced_test_feature_matrix)

print('reduced_feature_matrix_300ms saved')
